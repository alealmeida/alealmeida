{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.ScrollSwipe = factory();\n  }\n})(this, function () {\n  'use strict';\n\n  var VERTICAL = 'VERTICAL';\n  var HORIZONTAL = 'HORIZONTAL';\n  var acceptedParams = {\n    target: true,\n    scrollSensitivity: true,\n    touchSensitivity: true,\n    scrollCb: true,\n    touchCb: true,\n    scrollPreventDefault: true,\n    touchPreventDefault: true\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = ScrollSwipe;\n  }\n\n  function ScrollSwipe(opts) {\n    var _this = this;\n\n    Object.keys(opts).forEach(function (key) {\n      if (acceptedParams[key]) {\n        _this[key] = opts[key];\n        return;\n      }\n\n      throw new Error('unknown options for ScrollSwipe: ' + key);\n    });\n\n    if (!opts.target) {\n      throw new Error('must provide DOM target element to ScrollSwipe');\n    }\n\n    if (!this.scrollSensitivity || this.scrollSensitivity < 0) {\n      this.scrollSensitivity = 0;\n    }\n\n    if (!this.touchSensitivity || this.touchSensitivity < 0) {\n      this.touchSensitivity = 0;\n    }\n\n    this.startTouchEvent = null;\n    this.latestTouchEvent = null;\n    this.latestTouch = null;\n    this.startScrollEvent = null;\n    this.latestScrollEvent = null;\n    this.latestScroll = null;\n    this.intent = 0;\n    this.currentDirection = VERTICAL;\n    this.touchArr = [];\n    this.xArr = [];\n    this.yArr = [];\n    this.touchArrX = [];\n    this.touchArrY = [];\n    this.scrollPending = false; //these should only init if true\n\n    if (this.scrollCb) {\n      this.initScroll();\n    }\n\n    if (this.touchCb) {\n      this.initTouch();\n    }\n\n    return this;\n  }\n\n  ScrollSwipe.prototype.listen = function listen() {\n    this.flush();\n    this.scrollPending = false;\n    return this;\n  };\n\n  ScrollSwipe.prototype.onWheel = function onWheel(e) {\n    var _this2 = this;\n\n    if (this.scrollPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (this.scrollPending) {\n      return;\n    }\n\n    this.startScrollEvent = e;\n    var x = e.deltaX;\n    var y = e.deltaY;\n    this.addXScroll(x);\n    this.addYScroll(y);\n    this.scrollFulfilled(function (fulfilled, direction, intent) {\n      if (!fulfilled) {\n        return;\n      }\n\n      _this2.lockout();\n\n      _this2.latestScrollEvent = e;\n      var result = {\n        startEvent: e,\n        lastEvent: _this2.latestScrollEvent,\n        scrollPending: _this2.scrollPending,\n        direction: direction,\n        intent: intent\n      };\n\n      _this2.scrollCb(result);\n\n      _this2.undoLockout();\n    });\n  };\n\n  ScrollSwipe.prototype.initScroll = function initScroll() {\n    this.newOnWheel = this.onWheel.bind(this);\n\n    if (this.target && this.target.addEventListener) {\n      this.target.addEventListener('wheel', this.newOnWheel, false);\n    }\n\n    return this;\n  };\n\n  ScrollSwipe.prototype.touchMove = function touchMove(e) {\n    if (this.touchPreventDefault) {\n      e.preventDefault();\n    }\n\n    var changedTouches = e.changedTouches[0];\n    var x = changedTouches.clientX;\n    var y = changedTouches.clientY;\n    this.startTouchEvent = e;\n    this.addXTouch(x);\n    this.addYTouch(y);\n  };\n\n  ScrollSwipe.prototype.touchEnd = function touchEnd(e) {\n    var _this3 = this;\n\n    this.touchFulfilled(e, function (fulfilled, direction, intent) {\n      if (!fulfilled) {\n        return;\n      }\n\n      var result = {\n        startEvent: _this3.startTouchEvent,\n        lastEvent: _this3.latestTouchEvent,\n        scrollPending: _this3.scrollPending,\n        direction: direction,\n        intent: intent\n      };\n\n      _this3.touchCb(result);\n    });\n  };\n\n  ScrollSwipe.prototype.initTouch = function initTouch() {\n    this.newTouchMove = this.touchMove.bind(this);\n    this.newTouchEnd = this.touchEnd.bind(this);\n\n    if (this.target && this.target.addEventListener) {\n      this.target.addEventListener('touchmove', this.newTouchMove, false);\n      this.target.addEventListener('touchend', this.newTouchEnd, false);\n    }\n\n    return this;\n  }; //touch events\n\n\n  ScrollSwipe.prototype.touchFulfilled = function touchFulfilled(e, cb) {\n    if (!e) {\n      throw new Error('must provide event to touchFulfilled');\n    }\n\n    if (!cb) {\n      throw new Error('must provide callback to touchFulfilled');\n    }\n\n    var touchSensitivity = this.touchSensitivity,\n        touchArrX = this.touchArrX,\n        touchArrY = this.touchArrY;\n    var bool = touchArrX.length > touchSensitivity && touchArrY.length > touchSensitivity;\n\n    if (!bool) {\n      return cb(false, null);\n    }\n\n    var changedTouches = e.changedTouches[0];\n    var xStart = touchArrX[0];\n    var yStart = touchArrY[0];\n    var xEnd = changedTouches.clientX;\n    var yEnd = changedTouches.clientY;\n    var xIntent = xStart < xEnd ? 0 : 1;\n    var yIntent = yStart < yEnd ? 0 : 1;\n    var direction = VERTICAL; //determine vertical or horizontal based on the greatest difference\n\n    if (Math.abs(xStart - xEnd) > Math.abs(yStart - yEnd)) {\n      direction = HORIZONTAL;\n    }\n\n    var intent = direction === VERTICAL ? yIntent : xIntent;\n    swap.call(this, intent, direction);\n    this.resetTouches();\n    this.scrollPending = true;\n    this.latestTouchEvent = e;\n    cb(this.scrollPending, this.currentDirection, this.currentIntent);\n    return this;\n  };\n\n  ScrollSwipe.prototype.getTouch = function getTouch(idx) {\n    return this.touchArr[idx];\n  };\n\n  ScrollSwipe.prototype.addXTouch = function addTouch(touch) {\n    if (this.pending()) {\n      return this;\n    }\n\n    this.latestTouch = touch;\n    this.touchArrX.push(touch);\n    return this;\n  };\n\n  ScrollSwipe.prototype.addYTouch = function addTouch(touch) {\n    if (this.pending()) {\n      return this;\n    }\n\n    this.latestTouch = touch;\n    this.touchArrY.push(touch);\n    return this;\n  };\n\n  ScrollSwipe.prototype.resetTouches = function resetTouches() {\n    this.touchArrX = [];\n    this.touchArrY = [];\n    return this;\n  }; //wheel events\n\n\n  ScrollSwipe.prototype.addXScroll = function addXScroll(s) {\n    if (this.pending()) {\n      return this;\n    }\n\n    this.latestScroll = s;\n    this.xArr.push(s);\n    return this;\n  };\n\n  ScrollSwipe.prototype.addYScroll = function addYScroll(s) {\n    if (this.pending()) {\n      return this;\n    }\n\n    this.latestScroll = s;\n    this.yArr.push(s);\n    return this;\n  };\n\n  ScrollSwipe.prototype.getDirection = function getDirection() {\n    return this.currentDirection;\n  };\n\n  ScrollSwipe.prototype.resetScroll = function resetScroll() {\n    this.xArr = [];\n    this.yArr = [];\n    return this;\n  };\n\n  ScrollSwipe.prototype.flush = function flush() {\n    this.resetScroll();\n    this.resetTouches();\n    return this;\n  };\n\n  ScrollSwipe.prototype.lockout = function lockout() {\n    this.originalAddXTouch = this.addXTouch;\n    this.originalAddYTouch = this.addYTouch;\n    this.originalAddXScroll = this.addXScroll;\n    this.originalAddYScroll = this.addYScroll;\n\n    this.addXScroll = function () {};\n\n    this.addYScroll = function () {};\n\n    this.addXTouch = function () {};\n\n    this.addYTouch = function () {};\n\n    return this;\n  };\n\n  ScrollSwipe.prototype.undoLockout = function undoLockout() {\n    this.addXScroll = this.originalAddXScroll;\n    this.addYScroll = this.originalAddYScroll;\n    this.addXTouch = this.originalAddXTouch;\n    this.addYTouch = this.originalAddYTouch;\n    return this;\n  };\n\n  ScrollSwipe.prototype.scrollFulfilled = function scrollFulfilled(cb) {\n    if (!cb) {\n      throw new Error('must provide callback to scrollFulfilled');\n    }\n\n    var xArr = this.xArr,\n        yArr = this.yArr,\n        scrollSensitivity = this.scrollSensitivity;\n    var bool = xArr.length > scrollSensitivity && yArr.length > scrollSensitivity;\n\n    var _evalScrollDirection = this.evalScrollDirection(),\n        direction = _evalScrollDirection.direction,\n        intent = _evalScrollDirection.intent;\n\n    if (bool) {\n      swap.call(this, intent, direction);\n      this.resetScroll();\n      this.scrollPending = true;\n    }\n\n    cb(this.scrollPending, this.currentDirection, this.currentIntent);\n    return this;\n  };\n\n  ScrollSwipe.prototype.evalScrollDirection = function evalScrollDirection() {\n    var _getSums = this.getSums(),\n        x = _getSums.x,\n        y = _getSums.y,\n        xIntent = _getSums.xIntent,\n        yIntent = _getSums.yIntent;\n\n    var direction = x > y ? HORIZONTAL : VERTICAL;\n    var base = direction === VERTICAL ? yIntent : xIntent;\n    var intent = 0;\n\n    if (base > 0) {\n      intent = 1;\n    }\n\n    return {\n      direction: direction,\n      intent: intent\n    };\n  };\n\n  ScrollSwipe.prototype.getSums = function getSums() {\n    var xArr = this.xArr,\n        yArr = this.yArr;\n    var xIntent = 0;\n    var yIntent = 0;\n    var x = xArr.reduce(function (result, curr) {\n      xIntent = xIntent + curr;\n      return result += Math.abs(curr);\n    }, 0);\n    var y = yArr.reduce(function (result, curr) {\n      yIntent = yIntent + curr;\n      return result += Math.abs(curr);\n    }, 0);\n    return {\n      x: x,\n      y: y,\n      xIntent: xIntent,\n      yIntent: yIntent\n    };\n  };\n\n  ScrollSwipe.prototype.getScrollDirection = function getScrollDirection() {\n    return this.currentDirection;\n  };\n\n  ScrollSwipe.prototype.pending = function pending() {\n    return this.scrollPending;\n  };\n\n  ScrollSwipe.prototype.killScroll = function killScroll() {\n    if (this.target && this.target.removeEventListener) {\n      this.target.removeEventListener('wheel', this.newOnWheel, false);\n    }\n\n    return this;\n  };\n\n  ScrollSwipe.prototype.killTouch = function killTouch() {\n    if (this.target && this.target.removeEventListener) {\n      this.target.removeEventListener('touchmove', this.newTouchMove, false);\n      this.target.removeEventListener('touchend', this.newTouchEnd, false);\n    }\n\n    return this;\n  };\n\n  ScrollSwipe.prototype.killAll = function teardown() {\n    this.killScroll().killTouch();\n    this.flush();\n    return this;\n  };\n\n  function swap(intent, direction) {\n    this.previousIntent = this.currentIntent;\n    this.currentIntent = intent;\n    this.previousDirection = this.currentDirection;\n    this.currentDirection = direction;\n  }\n\n  return ScrollSwipe;\n});","map":null,"metadata":{},"sourceType":"script"}