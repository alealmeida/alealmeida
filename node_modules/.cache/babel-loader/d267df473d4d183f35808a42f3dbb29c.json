{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar ReactDOM = require('react-dom'); // React 16+ supports Portals.\n\n\nvar canUsePortals = !!ReactDOM.createPortal;\n\nfunction displace(WrappedComponent, options) {\n  if (!global.document) {\n    return function (_React$Component) {\n      _inherits(EmptyDisplace, _React$Component);\n\n      function EmptyDisplace() {\n        _classCallCheck(this, EmptyDisplace);\n\n        return _possibleConstructorReturn(this, (EmptyDisplace.__proto__ || Object.getPrototypeOf(EmptyDisplace)).apply(this, arguments));\n      }\n\n      _createClass(EmptyDisplace, [{\n        key: 'render',\n        value: function render() {\n          return false;\n        }\n      }]);\n\n      return EmptyDisplace;\n    }(React.Component);\n  }\n\n  options = options || {};\n\n  var Displaced = function (_React$Component2) {\n    _inherits(Displaced, _React$Component2);\n\n    function Displaced() {\n      var _ref;\n\n      var _temp, _this2, _ret;\n\n      _classCallCheck(this, Displaced);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = Displaced.__proto__ || Object.getPrototypeOf(Displaced)).call.apply(_ref, [this].concat(args))), _this2), _this2.renderDisplaced = function () {\n        ReactDOM.unstable_renderSubtreeIntoContainer(_this2, React.createElement(WrappedComponent, _this2.props, _this2.props.children), _this2.container);\n      }, _this2.removeDisplaced = function () {\n        ReactDOM.unmountComponentAtNode(_this2.container);\n      }, _temp), _possibleConstructorReturn(_this2, _ret);\n    }\n\n    _createClass(Displaced, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        this.container = function () {\n          if (!options.renderTo) {\n            var result = document.createElement('div');\n            document.body.appendChild(result);\n            return result;\n          } else if (typeof options.renderTo === 'string') {\n            return document.querySelector(options.renderTo);\n          } else {\n            return options.renderTo;\n          }\n        }();\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (canUsePortals) return;\n\n        if (this.props.mounted) {\n          this.renderDisplaced();\n        }\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps) {\n        if (canUsePortals) return;\n\n        if (prevProps.mounted && !this.props.mounted) {\n          ReactDOM.unmountComponentAtNode(this.container);\n        } else if (this.props.mounted) {\n          this.renderDisplaced();\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (!canUsePortals) {\n          ReactDOM.unmountComponentAtNode(this.container);\n        }\n\n        if (!options.renderTo) {\n          this.container.parentNode.removeChild(this.container);\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        if (!canUsePortals || this.props.mounted === false) {\n          return null;\n        }\n\n        return ReactDOM.createPortal(React.createElement(WrappedComponent, this.props, this.props.children), this.container);\n      }\n    }]);\n\n    return Displaced;\n  }(React.Component);\n\n  Displaced.defaultProps = {\n    mounted: true\n  };\n  Displaced.WrappedComponent = WrappedComponent;\n  return Displaced;\n}\n\nmodule.exports = displace;","map":null,"metadata":{},"sourceType":"script"}