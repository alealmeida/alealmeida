{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory((global.acorn = global.acorn || {}, global.acorn.walk = global.acorn.walk || {}));\n})(this, function (exports) {\n  'use strict'; // AST walker module for Mozilla Parser API compatible trees\n  // A simple walk is one where you simply specify callbacks to be\n  // called on specific nodes. The last two arguments are optional. A\n  // simple use would be\n  //\n  //     walk.simple(myTree, {\n  //         Expression: function(node) { ... }\n  //     });\n  //\n  // to do something with all expressions. All Parser API node types\n  // can be used to identify node types, as well as Expression,\n  // Statement, and ScopeBody, which denote categories of nodes.\n  //\n  // The base argument can be used to pass a custom (recursive)\n  // walker, and state can be used to give this walked an initial\n  // state.\n\n  function simple(node, visitors, base, state, override) {\n    if (!base) base = exports.base;\n\n    (function c(node, st, override) {\n      var type = override || node.type,\n          found = visitors[type];\n      base[type](node, st, c);\n      if (found) found(node, st);\n    })(node, state, override);\n  } // An ancestor walk keeps an array of ancestor nodes (including the\n  // current node) and passes them to the callback as third parameter\n  // (and also as state parameter when no other state is present).\n\n\n  function ancestor(node, visitors, base, state) {\n    if (!base) base = exports.base;\n    var ancestors = [];\n\n    (function c(node, st, override) {\n      var type = override || node.type,\n          found = visitors[type];\n      var isNew = node != ancestors[ancestors.length - 1];\n      if (isNew) ancestors.push(node);\n      base[type](node, st, c);\n      if (found) found(node, st || ancestors, ancestors);\n      if (isNew) ancestors.pop();\n    })(node, state);\n  } // A recursive walk is one where your functions override the default\n  // walkers. They can modify and replace the state parameter that's\n  // threaded through the walk, and can opt how and whether to walk\n  // their child nodes (by calling their third argument on these\n  // nodes).\n\n\n  function recursive(node, state, funcs, base, override) {\n    var visitor = funcs ? exports.make(funcs, base) : base;\n\n    (function c(node, st, override) {\n      visitor[override || node.type](node, st, c);\n    })(node, state, override);\n  }\n\n  function makeTest(test) {\n    if (typeof test == \"string\") return function (type) {\n      return type == test;\n    };else if (!test) return function () {\n      return true;\n    };else return test;\n  }\n\n  var Found = function Found(node, state) {\n    this.node = node;\n    this.state = state;\n  }; // Find a node with a given start, end, and type (all are optional,\n  // null can be used as wildcard). Returns a {node, state} object, or\n  // undefined when it doesn't find a matching node.\n\n\n  function findNodeAt(node, start, end, test, base, state) {\n    test = makeTest(test);\n    if (!base) base = exports.base;\n\n    try {\n      ;\n\n      (function c(node, st, override) {\n        var type = override || node.type;\n        if ((start == null || node.start <= start) && (end == null || node.end >= end)) base[type](node, st, c);\n        if ((start == null || node.start == start) && (end == null || node.end == end) && test(type, node)) throw new Found(node, st);\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) return e;\n      throw e;\n    }\n  } // Find the innermost node of a given type that contains the given\n  // position. Interface similar to findNodeAt.\n\n\n  function findNodeAround(node, pos, test, base, state) {\n    test = makeTest(test);\n    if (!base) base = exports.base;\n\n    try {\n      ;\n\n      (function c(node, st, override) {\n        var type = override || node.type;\n        if (node.start > pos || node.end < pos) return;\n        base[type](node, st, c);\n        if (test(type, node)) throw new Found(node, st);\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) return e;\n      throw e;\n    }\n  } // Find the outermost matching node after a given position.\n\n\n  function findNodeAfter(node, pos, test, base, state) {\n    test = makeTest(test);\n    if (!base) base = exports.base;\n\n    try {\n      ;\n\n      (function c(node, st, override) {\n        if (node.end < pos) return;\n        var type = override || node.type;\n        if (node.start >= pos && test(type, node)) throw new Found(node, st);\n        base[type](node, st, c);\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) return e;\n      throw e;\n    }\n  } // Find the outermost matching node before a given position.\n\n\n  function findNodeBefore(node, pos, test, base, state) {\n    test = makeTest(test);\n    if (!base) base = exports.base;\n    var max;\n\n    (function c(node, st, override) {\n      if (node.start > pos) return;\n      var type = override || node.type;\n      if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) max = new Found(node, st);\n      base[type](node, st, c);\n    })(node, state);\n\n    return max;\n  } // Fallback to an Object.create polyfill for older environments.\n\n\n  var create = Object.create || function (proto) {\n    function Ctor() {}\n\n    Ctor.prototype = proto;\n    return new Ctor();\n  }; // Used to create a custom walker. Will fill in all missing node\n  // type properties with the defaults.\n\n\n  function make(funcs, base) {\n    if (!base) base = exports.base;\n    var visitor = create(base);\n\n    for (var type in funcs) {\n      visitor[type] = funcs[type];\n    }\n\n    return visitor;\n  }\n\n  function skipThrough(node, st, c) {\n    c(node, st);\n  }\n\n  function ignore(_node, _st, _c) {} // Node walkers.\n\n\n  var base = {};\n\n  base.Program = base.BlockStatement = function (node, st, c) {\n    for (var i = 0; i < node.body.length; ++i) {\n      c(node.body[i], st, \"Statement\");\n    }\n  };\n\n  base.Statement = skipThrough;\n  base.EmptyStatement = ignore;\n\n  base.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {\n    return c(node.expression, st, \"Expression\");\n  };\n\n  base.IfStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Statement\");\n    if (node.alternate) c(node.alternate, st, \"Statement\");\n  };\n\n  base.LabeledStatement = function (node, st, c) {\n    return c(node.body, st, \"Statement\");\n  };\n\n  base.BreakStatement = base.ContinueStatement = ignore;\n\n  base.WithStatement = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.SwitchStatement = function (node, st, c) {\n    c(node.discriminant, st, \"Expression\");\n\n    for (var i = 0; i < node.cases.length; ++i) {\n      var cs = node.cases[i];\n      if (cs.test) c(cs.test, st, \"Expression\");\n\n      for (var j = 0; j < cs.consequent.length; ++j) {\n        c(cs.consequent[j], st, \"Statement\");\n      }\n    }\n  };\n\n  base.ReturnStatement = base.YieldExpression = function (node, st, c) {\n    if (node.argument) c(node.argument, st, \"Expression\");\n  };\n\n  base.ThrowStatement = base.SpreadElement = function (node, st, c) {\n    return c(node.argument, st, \"Expression\");\n  };\n\n  base.TryStatement = function (node, st, c) {\n    c(node.block, st, \"Statement\");\n    if (node.handler) c(node.handler, st);\n    if (node.finalizer) c(node.finalizer, st, \"Statement\");\n  };\n\n  base.CatchClause = function (node, st, c) {\n    c(node.param, st, \"Pattern\");\n    c(node.body, st, \"ScopeBody\");\n  };\n\n  base.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForStatement = function (node, st, c) {\n    if (node.init) c(node.init, st, \"ForInit\");\n    if (node.test) c(node.test, st, \"Expression\");\n    if (node.update) c(node.update, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForInStatement = base.ForOfStatement = function (node, st, c) {\n    c(node.left, st, \"ForInit\");\n    c(node.right, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForInit = function (node, st, c) {\n    if (node.type == \"VariableDeclaration\") c(node, st);else c(node, st, \"Expression\");\n  };\n\n  base.DebuggerStatement = ignore;\n\n  base.FunctionDeclaration = function (node, st, c) {\n    return c(node, st, \"Function\");\n  };\n\n  base.VariableDeclaration = function (node, st, c) {\n    for (var i = 0; i < node.declarations.length; ++i) {\n      c(node.declarations[i], st);\n    }\n  };\n\n  base.VariableDeclarator = function (node, st, c) {\n    c(node.id, st, \"Pattern\");\n    if (node.init) c(node.init, st, \"Expression\");\n  };\n\n  base.Function = function (node, st, c) {\n    if (node.id) c(node.id, st, \"Pattern\");\n\n    for (var i = 0; i < node.params.length; i++) {\n      c(node.params[i], st, \"Pattern\");\n    }\n\n    c(node.body, st, node.expression ? \"ScopeExpression\" : \"ScopeBody\");\n  }; // FIXME drop these node types in next major version\n  // (They are awkward, and in ES6 every block can be a scope.)\n\n\n  base.ScopeBody = function (node, st, c) {\n    return c(node, st, \"Statement\");\n  };\n\n  base.ScopeExpression = function (node, st, c) {\n    return c(node, st, \"Expression\");\n  };\n\n  base.Pattern = function (node, st, c) {\n    if (node.type == \"Identifier\") c(node, st, \"VariablePattern\");else if (node.type == \"MemberExpression\") c(node, st, \"MemberPattern\");else c(node, st);\n  };\n\n  base.VariablePattern = ignore;\n  base.MemberPattern = skipThrough;\n\n  base.RestElement = function (node, st, c) {\n    return c(node.argument, st, \"Pattern\");\n  };\n\n  base.ArrayPattern = function (node, st, c) {\n    for (var i = 0; i < node.elements.length; ++i) {\n      var elt = node.elements[i];\n      if (elt) c(elt, st, \"Pattern\");\n    }\n  };\n\n  base.ObjectPattern = function (node, st, c) {\n    for (var i = 0; i < node.properties.length; ++i) {\n      c(node.properties[i].value, st, \"Pattern\");\n    }\n  };\n\n  base.Expression = skipThrough;\n  base.ThisExpression = base.Super = base.MetaProperty = ignore;\n\n  base.ArrayExpression = function (node, st, c) {\n    for (var i = 0; i < node.elements.length; ++i) {\n      var elt = node.elements[i];\n      if (elt) c(elt, st, \"Expression\");\n    }\n  };\n\n  base.ObjectExpression = function (node, st, c) {\n    for (var i = 0; i < node.properties.length; ++i) {\n      c(node.properties[i], st);\n    }\n  };\n\n  base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\n\n  base.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n    for (var i = 0; i < node.expressions.length; ++i) {\n      c(node.expressions[i], st, \"Expression\");\n    }\n  };\n\n  base.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n    c(node.argument, st, \"Expression\");\n  };\n\n  base.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n    c(node.left, st, \"Expression\");\n    c(node.right, st, \"Expression\");\n  };\n\n  base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n    c(node.left, st, \"Pattern\");\n    c(node.right, st, \"Expression\");\n  };\n\n  base.ConditionalExpression = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Expression\");\n    c(node.alternate, st, \"Expression\");\n  };\n\n  base.NewExpression = base.CallExpression = function (node, st, c) {\n    c(node.callee, st, \"Expression\");\n    if (node.arguments) for (var i = 0; i < node.arguments.length; ++i) {\n      c(node.arguments[i], st, \"Expression\");\n    }\n  };\n\n  base.MemberExpression = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n    if (node.computed) c(node.property, st, \"Expression\");\n  };\n\n  base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n    if (node.declaration) c(node.declaration, st, node.type == \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\");\n    if (node.source) c(node.source, st, \"Expression\");\n  };\n\n  base.ExportAllDeclaration = function (node, st, c) {\n    c(node.source, st, \"Expression\");\n  };\n\n  base.ImportDeclaration = function (node, st, c) {\n    for (var i = 0; i < node.specifiers.length; i++) {\n      c(node.specifiers[i], st);\n    }\n\n    c(node.source, st, \"Expression\");\n  };\n\n  base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\n  base.TaggedTemplateExpression = function (node, st, c) {\n    c(node.tag, st, \"Expression\");\n    c(node.quasi, st);\n  };\n\n  base.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n    return c(node, st, \"Class\");\n  };\n\n  base.Class = function (node, st, c) {\n    if (node.id) c(node.id, st, \"Pattern\");\n    if (node.superClass) c(node.superClass, st, \"Expression\");\n\n    for (var i = 0; i < node.body.body.length; i++) {\n      c(node.body.body[i], st);\n    }\n  };\n\n  base.MethodDefinition = base.Property = function (node, st, c) {\n    if (node.computed) c(node.key, st, \"Expression\");\n    c(node.value, st, \"Expression\");\n  };\n\n  exports.simple = simple;\n  exports.ancestor = ancestor;\n  exports.recursive = recursive;\n  exports.findNodeAt = findNodeAt;\n  exports.findNodeAround = findNodeAround;\n  exports.findNodeAfter = findNodeAfter;\n  exports.findNodeBefore = findNodeBefore;\n  exports.make = make;\n  exports.base = base;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}