{"ast":null,"code":"import { dataToArray } from './util';\nvar scrollId = 'scroll-id';\n\nfunction EventDispatcher(target) {\n  this._listeners = {};\n  this._eventTarget = target || {};\n  this.recoverLists = [];\n  this._listFun = {};\n}\n\nEventDispatcher.prototype = {\n  addEventListener: function addEventListener(type, callback, target) {\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n\n    if (target && !target.getAttribute(scrollId)) {\n      target.setAttribute(scrollId, (Date.now() + Math.random()).toString(32).replace('.', ''));\n    }\n\n    var listName = \"\".concat(_type).concat(target ? \"_\".concat(target.getAttribute(scrollId)) : '');\n    var list = this._listeners[listName];\n    var index = 0;\n    var listener;\n    var i;\n\n    if (!list) {\n      list = [];\n      this._listeners[listName] = list;\n    }\n\n    i = list.length;\n\n    while (--i > -1) {\n      listener = list[i];\n\n      if (listener.n === namespaces && listener.c === callback) {\n        list.splice(i, 1);\n      } else if (index === 0) {\n        index = i + 1;\n      }\n    }\n\n    var $target = target || this._eventTarget;\n    list.splice(index, 0, {\n      c: callback,\n      n: namespaces,\n      t: _type\n    });\n\n    if (!this._listFun[listName]) {\n      this._listFun[listName] = this._listFun[listName] || this.dispatchEvent.bind(this, {\n        type: _type,\n        target: target\n      });\n\n      if ($target.addEventListener) {\n        $target.addEventListener(_type, this._listFun[listName], false);\n      } else if ($target.attachEvent) {\n        $target.attachEvent(\"on\".concat(_type), this._listFun[listName]);\n      }\n    }\n  },\n  removeEventListener: function removeEventListener(type, callback, target, force) {\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    var listName = \"\".concat(_type).concat(target ? \"_\".concat(target.getAttribute(scrollId)) : '');\n    var list = this._listeners[listName];\n    var i;\n    var _force = force;\n\n    if (!namespaces) {\n      _force = true;\n    }\n\n    if (list) {\n      i = list.length;\n      var $target = target || this._eventTarget;\n\n      while (--i > -1) {\n        if (list[i].c === callback && (_force || list[i].n === namespaces)) {\n          list.splice(i, 1);\n\n          if (!list.length) {\n            var func = this._listFun[listName];\n            delete this._listeners[listName];\n            delete this._listFun[listName];\n\n            if ($target.removeEventListener) {\n              $target.removeEventListener(_type, func);\n            } else if ($target.detachEvent) {\n              $target.detachEvent(\"on\".concat(_type), func);\n            }\n          }\n\n          if (!_force) {\n            return;\n          }\n        }\n      }\n    }\n  },\n  dispatchEvent: function dispatchEvent(_ref, e) {\n    var type = _ref.type,\n        target = _ref.target;\n    var listName = \"\".concat(type).concat(target ? \"_\".concat(target.getAttribute(scrollId)) : '');\n    var list = this._listeners[listName];\n    var i;\n    var t;\n    var listener;\n\n    if (list) {\n      i = list.length;\n      t = this._eventTarget;\n\n      while (--i > -1) {\n        listener = list[i];\n\n        if (listener) {\n          var _e = e || {\n            type: type,\n            target: t\n          };\n\n          listener.c.call(t, _e);\n        }\n      }\n    }\n  },\n  removeAllType: function removeAllType(type, target) {\n    var _this = this;\n\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    var listName = \"\".concat(_type).concat(target ? \"_\".concat(target.getAttribute(scrollId)) : '');\n    var list = this._listeners[listName];\n    this.recoverLists = this.recoverLists.concat(dataToArray(list).filter(function (item) {\n      return item.n && item.n.match(namespaces);\n    }));\n    this.recoverLists.forEach(function (item) {\n      _this.removeEventListener(\"\".concat(item.t, \".\").concat(item.n), item.c, target);\n    });\n  },\n  reAllType: function reAllType(type, target) {\n    var _this2 = this;\n\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    this.recoverLists = this.recoverLists.map(function (item) {\n      if (item.t === _type && item.n.match(namespaces)) {\n        _this2.addEventListener(\"\".concat(item.t, \".\").concat(item.n), item.c, target);\n\n        return null;\n      }\n\n      return item;\n    }).filter(function (item) {\n      return item;\n    });\n  }\n};\nexport default new EventDispatcher(typeof window !== 'undefined' && typeof document !== 'undefined' && window);\n;","map":{"version":3,"sources":["/Users/ale/Library/Mobile Documents/com~apple~CloudDocs/a/jobs/ws/alealmeida/src/EventDispatcher.js"],"names":["dataToArray","scrollId","EventDispatcher","target","_listeners","_eventTarget","recoverLists","_listFun","prototype","addEventListener","type","callback","types","split","_type","namespaces","getAttribute","setAttribute","Date","now","Math","random","toString","replace","listName","list","index","listener","i","length","n","c","splice","$target","t","dispatchEvent","bind","attachEvent","removeEventListener","force","_force","func","detachEvent","e","_e","call","removeAllType","concat","filter","item","match","forEach","reAllType","map","window","document"],"mappings":"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","sourcesContent":["import { dataToArray } from './util';\n\nconst scrollId = 'scroll-id';\n\nfunction EventDispatcher(target) {\n  this._listeners = {};\n  this._eventTarget = target || {};\n  this.recoverLists = [];\n  this._listFun = {};\n}\nEventDispatcher.prototype = {\n  addEventListener(type, callback, target) {\n    const types = type.split('.');\n    const _type = types[0];\n    const namespaces = types[1];\n    if (target && !target.getAttribute(scrollId)) {\n      target.setAttribute(scrollId, (Date.now() + Math.random()).toString(32).replace('.', ''));\n    }\n    const listName = `${_type}${target ? `_${target.getAttribute(scrollId)}` : ''}`;\n    let list = this._listeners[listName];\n    let index = 0;\n    let listener;\n    let i;\n    if (!list) {\n      list = [];\n      this._listeners[listName] = list;\n    }\n    i = list.length;\n    while (--i > -1) {\n      listener = list[i];\n      if (listener.n === namespaces && listener.c === callback) {\n        list.splice(i, 1);\n      } else if (index === 0) {\n        index = i + 1;\n      }\n    }\n    const $target = target || this._eventTarget;\n    list.splice(index, 0, { c: callback, n: namespaces, t: _type });\n    if (!this._listFun[listName]) {\n      this._listFun[listName] = this._listFun[listName] || this.dispatchEvent.bind(this, { type: _type, target });\n      if ($target.addEventListener) {\n        $target.addEventListener(_type, this._listFun[listName], false);\n      } else if ($target.attachEvent) {\n        $target.attachEvent(`on${_type}`, this._listFun[listName]);\n      }\n    }\n  },\n\n  removeEventListener(type, callback, target, force) {\n    const types = type.split('.');\n    const _type = types[0];\n    const namespaces = types[1];\n    const listName = `${_type}${target ? `_${target.getAttribute(scrollId)}` : ''}`;\n    const list = this._listeners[listName];\n    let i;\n    let _force = force;\n    if (!namespaces) {\n      _force = true;\n    }\n    if (list) {\n      i = list.length;\n      const $target = target || this._eventTarget;\n      while (--i > -1) {\n        if (list[i].c === callback && (_force || list[i].n === namespaces)) {\n          list.splice(i, 1);\n          if (!list.length) {\n            const func = this._listFun[listName];\n            delete this._listeners[listName];\n            delete this._listFun[listName];\n            if ($target.removeEventListener) {\n              $target.removeEventListener(_type, func);\n            } else if ($target.detachEvent) {\n              $target.detachEvent(`on${_type}`, func);\n            }\n          }\n          if (!_force) {\n            return;\n          }\n        }\n      }\n    }\n  },\n\n  dispatchEvent({ type, target }, e) {\n    const listName = `${type}${target ? `_${target.getAttribute(scrollId)}` : ''}`;\n    const list = this._listeners[listName];\n    let i;\n    let t;\n    let listener;\n    if (list) {\n      i = list.length;\n      t = this._eventTarget;\n      while (--i > -1) {\n        listener = list[i];\n        if (listener) {\n          const _e = e || { type, target: t };\n          listener.c.call(t, _e);\n        }\n      }\n    }\n  },\n  removeAllType(type, target) {\n    const types = type.split('.');\n    const _type = types[0];\n    const namespaces = types[1];\n    const listName = `${_type}${target ? `_${target.getAttribute(scrollId)}` : ''}`;\n    const list = this._listeners[listName];\n    this.recoverLists = this.recoverLists.concat(dataToArray(list).filter(item =>\n      item.n && item.n.match(namespaces)\n    ));\n    this.recoverLists.forEach(item => {\n      this.removeEventListener(`${item.t}.${item.n}`, item.c, target);\n    });\n  },\n  reAllType(type, target) {\n    const types = type.split('.');\n    const _type = types[0];\n    const namespaces = types[1];\n    this.recoverLists = this.recoverLists.map(item => {\n      if (item.t === _type && item.n.match(namespaces)) {\n        this.addEventListener(`${item.t}.${item.n}`, item.c, target);\n        return null;\n      }\n      return item;\n    }).filter(item => item);\n  },\n};\nexport default new EventDispatcher(typeof window !== 'undefined'\n  && typeof document !== 'undefined' && window);;"]},"metadata":{},"sourceType":"module"}