{"ast":null,"code":"module.exports = function detectOS(userAgentString) {\n  var operatingSystems = [{\n    name: 'iOS',\n    rule: /iP(hone|od|ad)/\n  }, {\n    name: 'Android OS',\n    rule: /Android/\n  }, {\n    name: 'BlackBerry OS',\n    rule: /BlackBerry|BB10/\n  }, {\n    name: 'Windows Mobile',\n    rule: /IEMobile/\n  }, {\n    name: 'Amazon OS',\n    rule: /Kindle/\n  }, {\n    name: 'Windows 3.11',\n    rule: /Win16/\n  }, {\n    name: 'Windows 95',\n    rule: /(Windows 95)|(Win95)|(Windows_95)/\n  }, {\n    name: 'Windows 98',\n    rule: /(Windows 98)|(Win98)/\n  }, {\n    name: 'Windows 2000',\n    rule: /(Windows NT 5.0)|(Windows 2000)/\n  }, {\n    name: 'Windows XP',\n    rule: /(Windows NT 5.1)|(Windows XP)/\n  }, {\n    name: 'Windows Server 2003',\n    rule: /(Windows NT 5.2)/\n  }, {\n    name: 'Windows Vista',\n    rule: /(Windows NT 6.0)/\n  }, {\n    name: 'Windows 7',\n    rule: /(Windows NT 6.1)/\n  }, {\n    name: 'Windows 8',\n    rule: /(Windows NT 6.2)/\n  }, {\n    name: 'Windows 8.1',\n    rule: /(Windows NT 6.3)/\n  }, {\n    name: 'Windows 10',\n    rule: /(Windows NT 10.0)/\n  }, {\n    name: 'Windows ME',\n    rule: /Windows ME/\n  }, {\n    name: 'Open BSD',\n    rule: /OpenBSD/\n  }, {\n    name: 'Sun OS',\n    rule: /SunOS/\n  }, {\n    name: 'Linux',\n    rule: /(Linux)|(X11)/\n  }, {\n    name: 'Mac OS',\n    rule: /(Mac_PowerPC)|(Macintosh)/\n  }, {\n    name: 'QNX',\n    rule: /QNX/\n  }, {\n    name: 'BeOS',\n    rule: /BeOS/\n  }, {\n    name: 'OS/2',\n    rule: /OS\\/2/\n  }, {\n    name: 'Search Bot',\n    rule: /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/\n  }];\n  var detected = operatingSystems.filter(function (os) {\n    if (userAgentString.match(os.rule)) {\n      return true;\n    }\n  });\n  return detected && detected[0] ? detected[0].name : null;\n};","map":{"version":3,"sources":["/Users/ale/Library/Mobile Documents/com~apple~CloudDocs/a/jobs/ws/alealmeida/src/lib/utils/detectOS.js"],"names":["module","exports","detectOS","userAgentString","operatingSystems","name","rule","detected","filter","os","match"],"mappings":"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","sourcesContent":["module.exports = function detectOS(userAgentString) {\n    const operatingSystems = [\n        {\n            name: 'iOS',\n            rule: /iP(hone|od|ad)/\n        },\n        {\n            name: 'Android OS',\n            rule: /Android/\n        },\n        {\n            name: 'BlackBerry OS',\n            rule: /BlackBerry|BB10/\n        },\n        {\n            name: 'Windows Mobile',\n            rule: /IEMobile/\n        },\n        {\n            name: 'Amazon OS',\n            rule: /Kindle/\n        },\n        {\n            name: 'Windows 3.11',\n            rule: /Win16/\n        },\n        {\n            name: 'Windows 95',\n            rule: /(Windows 95)|(Win95)|(Windows_95)/\n        },\n        {\n            name: 'Windows 98',\n            rule: /(Windows 98)|(Win98)/\n        },\n        {\n            name: 'Windows 2000',\n            rule: /(Windows NT 5.0)|(Windows 2000)/\n        },\n        {\n            name: 'Windows XP',\n            rule: /(Windows NT 5.1)|(Windows XP)/\n        },\n        {\n            name: 'Windows Server 2003',\n            rule: /(Windows NT 5.2)/\n        },\n        {\n            name: 'Windows Vista',\n            rule: /(Windows NT 6.0)/\n        },\n        {\n            name: 'Windows 7',\n            rule: /(Windows NT 6.1)/\n        },\n        {\n            name: 'Windows 8',\n            rule: /(Windows NT 6.2)/\n        },\n        {\n            name: 'Windows 8.1',\n            rule: /(Windows NT 6.3)/\n        },\n        {\n            name: 'Windows 10',\n            rule: /(Windows NT 10.0)/\n        },\n        {\n            name: 'Windows ME',\n            rule: /Windows ME/\n        },\n        {\n            name: 'Open BSD',\n            rule: /OpenBSD/\n        },\n        {\n            name: 'Sun OS',\n            rule: /SunOS/\n        },\n        {\n            name: 'Linux',\n            rule: /(Linux)|(X11)/\n        },\n        {\n            name: 'Mac OS',\n            rule: /(Mac_PowerPC)|(Macintosh)/\n        },\n        {\n            name: 'QNX',\n            rule: /QNX/\n        },\n        {\n            name: 'BeOS',\n            rule: /BeOS/\n        },\n        {\n            name: 'OS/2',\n            rule: /OS\\/2/\n        },\n        {\n            name: 'Search Bot',\n            rule: /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/\n        }\n    ];\n\n    const detected = operatingSystems.filter(function (os) {\n        if (userAgentString.match(os.rule)) {\n            return true;\n        }\n    });\n\n    return detected && detected[0] ? detected[0].name : null;\n};"]},"metadata":{},"sourceType":"module"}